{"name": "test_add_customer_004", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=121.0.6167.161)\nStacktrace:\n\tGetHandleVerifier [0x00007FF621F45E42+3538674]\n\t(No symbol) [0x00007FF621B64C02]\n\t(No symbol) [0x00007FF621A1599D]\n\t(No symbol) [0x00007FF621A5D406]\n\t(No symbol) [0x00007FF621A51950]\n\t(No symbol) [0x00007FF621A7F0AA]\n\t(No symbol) [0x00007FF621A5124A]\n\t(No symbol) [0x00007FF621A7F2C0]\n\t(No symbol) [0x00007FF621A9BDE3]\n\t(No symbol) [0x00007FF621A7EE53]\n\t(No symbol) [0x00007FF621A4F514]\n\t(No symbol) [0x00007FF621A50631]\n\tGetHandleVerifier [0x00007FF621F76CAD+3738973]\n\tGetHandleVerifier [0x00007FF621FCC506+4089270]\n\tGetHandleVerifier [0x00007FF621FC4823+4057299]\n\tGetHandleVerifier [0x00007FF621C95C49+720121]\n\t(No symbol) [0x00007FF621B7126F]\n\t(No symbol) [0x00007FF621B6C304]\n\t(No symbol) [0x00007FF621B6C432]\n\t(No symbol) [0x00007FF621B5BD04]\n\tBaseThreadInitThunk [0x00007FFCB40C7344+20]\n\tRtlUserThreadStart [0x00007FFCB50026B1+33]", "trace": "self = <test_cases.test_add_customer.Test_add_customer object at 0x000002650802A290>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"30896e2903eb4e756b919934c83986eb\")>\n\n    @allure.feature('add customer')\n    @allure.story('validating add customer page')\n    @allure.issue('ABC-004')\n    @allure.link(url=\"--> https://admin-demo.nopcommerce.com\", name=\"--> nop_commerce\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('test_add_customer_004')\n    @allure.description('testing_add_customer_page')\n    def test_add_customer_003(self, setup):\n        self.log.info(\"Testcase test_add_customer_003 Started\")\n        self.log.info(\"Opening the Browser\")\n        self.driver = setup\n        self.log.info(\"Assigning Variable to Login_page\")\n        self.lp = Login_page(self.driver)\n        self.log.info(\"Assigning Variable to Add_customer_page\")\n        self.ac = Add_customer(self.driver)\n        self.log.info(\"Entering Email -->\" + self.email)\n        self.lp.email(self.email)\n        self.log.info(\"Entering Password -->\" + self.password)\n        self.lp.password(self.password)\n        self.log.info(\"Clicking Login Button\")\n        self.lp.login_btn()\n        if self.lp.login_verification() == \"Login Successful\":\n            self.log.info(\"Login Successful\")\n            self.log.info(\"Clicking 1st Customers Button\")\n>           self.ac.customer_btn()\n\ntest_cases\\test_add_customer.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\add_customer_page.py:50: in customer_btn\n    self.driver.find_element(By.XPATH, self.customers_button_by_xpath).click()\nD:\\Pytest_nopcommerce\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\Pytest_nopcommerce\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\Pytest_nopcommerce\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026508B619D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF621B5BD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCB40C7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCB50026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=121.0.6167.161)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF621F45E42+3538674]\nE       \t(No symbol) [0x00007FF621B64C02]\nE       \t(No symbol) [0x00007FF621A1599D]\nE       \t(No symbol) [0x00007FF621A5D406]\nE       \t(No symbol) [0x00007FF621A51950]\nE       \t(No symbol) [0x00007FF621A7F0AA]\nE       \t(No symbol) [0x00007FF621A5124A]\nE       \t(No symbol) [0x00007FF621A7F2C0]\nE       \t(No symbol) [0x00007FF621A9BDE3]\nE       \t(No symbol) [0x00007FF621A7EE53]\nE       \t(No symbol) [0x00007FF621A4F514]\nE       \t(No symbol) [0x00007FF621A50631]\nE       \tGetHandleVerifier [0x00007FF621F76CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF621FCC506+4089270]\nE       \tGetHandleVerifier [0x00007FF621FC4823+4057299]\nE       \tGetHandleVerifier [0x00007FF621C95C49+720121]\nE       \t(No symbol) [0x00007FF621B7126F]\nE       \t(No symbol) [0x00007FF621B6C304]\nE       \t(No symbol) [0x00007FF621B6C432]\nE       \t(No symbol) [0x00007FF621B5BD04]\nE       \tBaseThreadInitThunk [0x00007FFCB40C7344+20]\nE       \tRtlUserThreadStart [0x00007FFCB50026B1+33]\n\nD:\\Pytest_nopcommerce\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "description": "testing_add_customer_page", "attachments": [{"name": "log", "source": "7ba0e469-557b-4627-b3c0-30c1750eb5be-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "29e6e3c9-d8d9-4dd5-960e-ea0900a0d437-attachment.txt", "type": "text/plain"}], "start": 1707473126018, "stop": 1707473142595, "uuid": "8b181c59-e583-434d-8c11-24767a83f7aa", "historyId": "2b3ce8e5ca7cd574dee9dff426ec9a06", "testCaseId": "2b3ce8e5ca7cd574dee9dff426ec9a06", "fullName": "test_cases.test_add_customer.Test_add_customer#test_add_customer_003", "labels": [{"name": "feature", "value": "add customer"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "validating add customer page"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_add_customer"}, {"name": "subSuite", "value": "Test_add_customer"}, {"name": "host", "value": "LAPTOP-1DT8TVKR"}, {"name": "thread", "value": "11716-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_add_customer"}], "links": [{"type": "link", "url": "--> https://admin-demo.nopcommerce.com", "name": "--> nop_commerce"}, {"type": "issue", "url": "ABC-004", "name": "ABC-004"}]}