{"name": "test_search_customer_004", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=121.0.6167.161)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6D3505E42+3538674]\n\t(No symbol) [0x00007FF6D3124C02]\n\t(No symbol) [0x00007FF6D2FD599D]\n\t(No symbol) [0x00007FF6D301D406]\n\t(No symbol) [0x00007FF6D3011950]\n\t(No symbol) [0x00007FF6D303F0AA]\n\t(No symbol) [0x00007FF6D301124A]\n\t(No symbol) [0x00007FF6D303F2C0]\n\t(No symbol) [0x00007FF6D305BDE3]\n\t(No symbol) [0x00007FF6D303EE53]\n\t(No symbol) [0x00007FF6D300F514]\n\t(No symbol) [0x00007FF6D3010631]\n\tGetHandleVerifier [0x00007FF6D3536CAD+3738973]\n\tGetHandleVerifier [0x00007FF6D358C506+4089270]\n\tGetHandleVerifier [0x00007FF6D3584823+4057299]\n\tGetHandleVerifier [0x00007FF6D3255C49+720121]\n\t(No symbol) [0x00007FF6D313126F]\n\t(No symbol) [0x00007FF6D312C304]\n\t(No symbol) [0x00007FF6D312C432]\n\t(No symbol) [0x00007FF6D311BD04]\n\tBaseThreadInitThunk [0x00007FFCB40C7344+20]\n\tRtlUserThreadStart [0x00007FFCB50026B1+33]", "trace": "self = <test_cases.test_search_customer.Test_search_customer object at 0x0000029194A67790>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f4108ef9258f4c6f2c5ef0705c92f34d\")>\n\n    @allure.feature('search customer')\n    @allure.story('validating search customer page')\n    @allure.issue('ABC-003')\n    @allure.link(url=\"--> https://admin-demo.nopcommerce.com\", name=\"--> nop_commerce\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('test_search_customer_004')\n    @allure.description('testing_search_customer_page')\n    def test_search_customer_004(self, setup):\n        self.log.info(\"Testcase test_search_customer_004 Started\")\n        self.log.info(\"Opening the Browser\")\n        self.driver = setup\n        self.log.info(\"Assigning Variable to Login Page\")\n        self.lp = Login_page(self.driver)\n        self.log.info(\"Assigning Variable to Search Customer\")\n        self.sc = Search_customer(self.driver)\n        self.log.info(\"Assigning Variable to Add Customer\")\n        self.ac = Add_customer(self.driver)\n        self.log.info(\"Entering Email -->\" + self.email)\n        self.lp.email(self.email)\n        self.log.info(\"Entering Password -->\" + self.password)\n        self.lp.password(self.password)\n        self.log.info(\"Clicking on Login Button\")\n        self.lp.login_btn()\n        if self.lp.login_verification() == \"Login Successful\":\n            self.log.info(\"Login Successful\")\n            self.log.info(\"Clicking 1st Customer Button\")\n>           self.ac.customer_btn()\n\ntest_cases\\test_search_customer.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\add_customer_page.py:50: in customer_btn\n    self.driver.find_element(By.XPATH, self.customers_button_by_xpath).click()\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000291948D5710>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6D311BD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCB40C7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCB50026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=121.0.6167.161)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6D3505E42+3538674]\nE       \t(No symbol) [0x00007FF6D3124C02]\nE       \t(No symbol) [0x00007FF6D2FD599D]\nE       \t(No symbol) [0x00007FF6D301D406]\nE       \t(No symbol) [0x00007FF6D3011950]\nE       \t(No symbol) [0x00007FF6D303F0AA]\nE       \t(No symbol) [0x00007FF6D301124A]\nE       \t(No symbol) [0x00007FF6D303F2C0]\nE       \t(No symbol) [0x00007FF6D305BDE3]\nE       \t(No symbol) [0x00007FF6D303EE53]\nE       \t(No symbol) [0x00007FF6D300F514]\nE       \t(No symbol) [0x00007FF6D3010631]\nE       \tGetHandleVerifier [0x00007FF6D3536CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF6D358C506+4089270]\nE       \tGetHandleVerifier [0x00007FF6D3584823+4057299]\nE       \tGetHandleVerifier [0x00007FF6D3255C49+720121]\nE       \t(No symbol) [0x00007FF6D313126F]\nE       \t(No symbol) [0x00007FF6D312C304]\nE       \t(No symbol) [0x00007FF6D312C432]\nE       \t(No symbol) [0x00007FF6D311BD04]\nE       \tBaseThreadInitThunk [0x00007FFCB40C7344+20]\nE       \tRtlUserThreadStart [0x00007FFCB50026B1+33]\n\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "description": "testing_search_customer_page", "attachments": [{"name": "log", "source": "e0e5ec48-6a1c-420e-8151-a8ac0a7ea0a4-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f2e8e6c8-e9cf-4203-a2d2-e8966fbc801b-attachment.txt", "type": "text/plain"}], "start": 1707473049621, "stop": 1707473063077, "uuid": "3302620a-aecf-4d7d-996e-5bb4a58cf0c3", "historyId": "9799e6a42499a8cf701c160841a0b41c", "testCaseId": "9799e6a42499a8cf701c160841a0b41c", "fullName": "test_cases.test_search_customer.Test_search_customer#test_search_customer_004", "labels": [{"name": "feature", "value": "search customer"}, {"name": "story", "value": "validating search customer page"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_search_customer"}, {"name": "subSuite", "value": "Test_search_customer"}, {"name": "host", "value": "LAPTOP-1DT8TVKR"}, {"name": "thread", "value": "16984-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_search_customer"}], "links": [{"type": "link", "url": "--> https://admin-demo.nopcommerce.com", "name": "--> nop_commerce"}, {"type": "issue", "url": "ABC-003", "name": "ABC-003"}]}